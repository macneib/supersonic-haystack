pr:
  autoCancel: false
  branches:
    include:
    - main
    - develop

trigger:
  batch: false
  branches:
    include:
    - main
    - develop

resources:
- repo: self

stages:
  - stage: Build_Queue
    displayName: Build Queue
    pool:
      vmImage: 'ubuntu-latest'
    variables:
      IS_PR: $[ eq(variables['Build.Reason'], 'PullRequest') ]
    jobs:
      - job: initial_setup
        pool:
          vmImage: 'ubuntu-latest'
        variables:
          IS_PR: $[ eq(variables['Build.Reason'], 'PullRequest') ]
        steps:
          - template: .azure-pipelines/steps/install-node-modules.yml
          - bash: |
              command -v git > /dev/null 2>&1 || { echo "Git not installed."; exit 1; }
              branch=`git rev-parse --abbrev-ref HEAD`
              merge_commit_hash=`git rev-parse --short HEAD`
              build_commit_hash=`git rev-list --no-merges -n1 HEAD`
              files="$(git --no-pager diff --name-only FETCH_HEAD $(git merge-base FETCH_HEAD main))"

              apps=()
              commons=()

              for file in $files
              do
                  common="$(echo $file | cut -d '/' -f2)"
                  if test -d commons/$common; then
                      for i in $(find . -type f -not -path "./node_modules/*" -not -path "./.git/*" -print | xargs grep "commons/$common" | cut -d '/' -f3);
                      do
                          affected="$i"
                          apps+=($affected);
                      done
                  fi
              done

              for file in $files
              do
                  app="$(echo $file | cut -d '/' -f2)"
                  if test -d apps/$app; then
                      apps+=($app);
                  fi
              done

              for value in "$(echo "${apps[@]}" | tr ' ' '\n' | sort -u | tr '\n' ' ')"
              do
                  echo $value
              done
              echo "##vso[task.setvariable variable=BUILD_QUEUE;isOutput=true]$value"

          
          # - bash: echo "##vso[task.setvariable variable=COMMANDS;isOutput=true]$(node ./tools/scripts/build-queue.js $(IS_PR))"
          # - bash: echo "##vso[task.setvariable variable=myStageOutputVar;isOutput=true]$myVar"
          # - bash: |
          #     FOO="some value"
          #     echo "##vso[task.setvariable variable=FOO]$FOO"
          # - bash: |
          #     BUILD_QUEUE="$(node ./tools/scripts/build-queue.js)"
          #     echo "##vso[task.setvariable variable=BUILD_QUEUE;isOutput=true]$BUILD_QUEUE"
          #     echo "$FOO"
          #     echo $BUILD_QUEUE
          # name: buildQueue
          - script: echo "$(buildQueue.BUILD_QUEUE)"
            name: echoQueue

  # - stage: dev
  #   displayName: Dev Deployment
  #   dependsOn: Build_Queue
  #   # condition: and(succeeded(), not(startsWith(variables['Build.SourceBranch'], 'refs/pull/')))
  #   condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/develop'))
  #   jobs:
  #     - job: Helm
  #       steps:
  #         - script: echo Helm Step
  #           displayName: Helm reason is $(Build.Reason)

  # - stage: DeployPullRequest
  #   dependsOn: Build_Queue
  #   condition: and(succeeded(), startsWith(variables['Build.SourceBranch'], 'refs/pull/'))
  #   displayName: Deploy Pull request
  #   jobs:
  #     - job: Helm

  #       steps:
  #         - script: echo Helm Step
  #           displayName: Helm reason is $(Build.Reason)

  # - stage: qa
  #   dependsOn: dev
  #   condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/main'))
  #   displayName: QA Deployment
  #   jobs:
  #     - job: Helm
  #       steps:
  #         - script: echo Helm Step
  #           displayName: Helm reason is $(Build.Reason)

  # - stage: production
  #   dependsOn: qa
  #   condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/main'))
  #   displayName: Production Deployment
  #   jobs:
  #     - job: Helm
  #       steps:
  #         - script: echo Helm Step
  #           displayName: Helm reason is $(Build.Reason)
