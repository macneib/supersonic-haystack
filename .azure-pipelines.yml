pr:
  autoCancel: false
  branches:
    include:
    - main
    - develop

trigger:
  batch: false
  branches:
    include:
    - main
    - develop

resources:
- repo: self

stages:
  - stage: ci
    displayName: Build Queue
    pool:
      vmImage: 'ubuntu-latest'
    jobs:
      # set up node.js environment
      - job: Build_Queue
        # variables:
        #     IS_PR: $[ eq(variables['Build.Reason'], 'PullRequest') ]
        pool:
          vmImage: 'ubuntu-latest'
        steps:
          - template: .azure-pipelines/steps/install-node-modules.yml
          - powershell: echo "##vso[task.setvariable variable=BUILD_QUEUE;isOutput=true]$(node ./tools/scripts/build-queue.js)"
            name: setBuildQueue
          - script: echo "$(setBuildQueue.BUILD_QUEUE)"
            name: echoBuildueue
      - job: build1
        dependsOn: Build_Queue
        condition: |
          and(
            succeeded(),
            not(contains(
              dependencies.Build_Queue.outputs['setBuildQueue.BUILD_QUEUE'],
              '"build1":[]'
            ))
          )
        pool:
          vmImage: 'ubuntu-latest'
        variables:
          BUILD_QUEUE: $[ dependencies.Build_Queue.outputs['setBuildQueue.BUILD_QUEUE'] ]
        steps:
          - template: .azure-pipelines/steps/install-node-modules.yml
          - script: node ./tools/scripts/run-many.js '$(BUILD_QUEUE)' build1 build

      - job: build2
        dependsOn: Build_Queue
        condition: |
          and(
            succeeded(),
            not(contains(
              dependencies.Build_Queue.outputs['setBuildQueue.BUILD_QUEUE'],
              '"build2":[]'
            ))
          )
        pool:
          vmImage: 'ubuntu-latest'
        variables:
          BUILD_QUEUE: $[ dependencies.Build_Queue.outputs['setBuildQueue.BUILD_QUEUE'] ]
        steps:
          - template: .azure-pipelines/steps/install-node-modules.yml
          - script: node ./tools/scripts/run-many.js '$(BUILD_QUEUE)' build2 build

      - job: build3
        dependsOn: Build_Queue
        condition: |
          and(
            succeeded(),
            not(contains(
              dependencies.Build_Queue.outputs['setBuildQueue.BUILD_QUEUE'],
              '"build3":[]'
            ))
          )
        pool:
          vmImage: 'ubuntu-latest'
        variables:
          BUILD_QUEUE: $[ dependencies.Build_Queue.outputs['setBuildQueue.BUILD_QUEUE'] ]
        steps:
          - template: .azure-pipelines/steps/install-node-modules.yml
          - script: node ./tools/scripts/run-many.js '$(BUILD_QUEUE)' build3 build


      # Each App and it's template that can be built.
      # - template: .azure-pipelines/steps/build-nodejs-template.yml
      #   parameters:
      #     name: foo_app
      #     appDirectory: 'apps/foo-app'
      # - template: .azure-pipelines/steps/build-nodejs-template.yml
      #   parameters:
      #     name: bar_app
      #     appDirectory: 'apps/bar-app'
      # - template: .azure-pipelines/steps/build-nodejs-template.yml
      #   parameters:
      #     name: baz_app
      #     appDirectory: 'apps/baz-app'

  # - stage: dev
  #   displayName: Dev Deployment
  #   dependsOn: Build_Queue
  #   # condition: and(succeeded(), not(startsWith(variables['Build.SourceBranch'], 'refs/pull/')))
  #   condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/develop'))
  #   jobs:
  #     - job: Helm
  #       steps:
  #         - script: echo Helm Step
  #           displayName: Helm reason is $(Build.Reason)

  # - stage: DeployPullRequest
  #   dependsOn: Build_Queue
  #   condition: and(succeeded(), startsWith(variables['Build.SourceBranch'], 'refs/pull/'))
  #   displayName: Deploy Pull request
  #   jobs:
  #     - job: Helm

  #       steps:
  #         - script: echo Helm Step
  #           displayName: Helm reason is $(Build.Reason)

  # - stage: qa
  #   dependsOn: dev
  #   condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/main'))
  #   displayName: QA Deployment
  #   jobs:
  #     - job: Helm
  #       steps:
  #         - script: echo Helm Step
  #           displayName: Helm reason is $(Build.Reason)

  # - stage: production
  #   dependsOn: qa
  #   condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/main'))
  #   displayName: Production Deployment
  #   jobs:
  #     - job: Helm
  #       steps:
  #         - script: echo Helm Step
  #           displayName: Helm reason is $(Build.Reason)
